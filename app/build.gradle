/* CONCETTI
 - Android ufficiale:  Opzioni di test avanzate!!! https://developer.android.com/studio/test/advanced-test-setup

 - Si puo' cambiare anche la directory dove vengono salvati i risultati dei tests: (vedi sopra)

 - Opzioni di textInstrumentalRunner: https://medium.com/stepstone-tech/exploring-androidjunitrunner-filtering-options-df26d30b4f60

 - Annotazioni: https://pspdfkit.com/blog/2020/filtering-tests-in-android/

 - 6 MIGLIORI TUTORIALS PER GRADLE!!!! https://tomgregory.com/best-gradle-tutorials-for-beginners/

 - se dentro ad unitTests.all di mette filter {includeTestsMatching "ExampleUnitTest.primo_test"}   esegue solo il primo test (esempio)  !!!!!! e si possono cercare i test che si vuole!!!!

 - esempio filter: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestFilter.html

 - Si puo' generare un file xml per i test CI

 - Documentazione TestLogging: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/logging/TestLoggingContainer.html

 - permessi per le azioni: https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs

 - scrivere tests for librerie android!!!!! https://medium.com/geekculture/write-your-tests-for-your-android-libraries-and-plugins-3ec4b5da2faf

 - testare una build con testKit https://docs.gradle.org/current/userguide/test_kit.html

 - Ci vuole il test dei plugin e dei tasks!!!! vedi documentazione ufficiale!!!!

 -- Come si modificano Tasks di un certo tipo????

 - pubblicare i risultati dei tuoi tests: https://github.com/marketplace/actions/publish-unit-test-results

 - Articolo molto interessante su DAG e diversi momenti di esecuzione!!!!!!!!!! https://www.devopsschool.com/blog/what-is-gradle-dag-directed-acyclic-graph/

 - Come si aggiunge una task ad un subproject (mettendo apply e il plugin!!!) https://stackoverflow.com/questions/44943330/adding-gradle-task-to-a-subproject-in-method

 - Come si inseriscono tasks dentro un subproject!!! https://discuss.gradle.org/t/gradle-task-in-subproject/23071
   Come si vede con la task cavolino (che non ha dipendenze) e stampa in console!!!! e fa' parte del subproject :app    !!!!

 - Tutorial su come leggere un file xml: https://www.youtube.com/watch?v=ew09HvT01MQ

 - AGGREGARE TESTS. C'e' un plugin per github actions? come in locale https://docs.gradle.org/current/userguide/test_report_aggregation_plugin.html#test_report_aggregation_plugin

 - Si puo' modificare la directory dove si salvano i risultati modificando delle variabili
    reporting.baseDir = "my-reports"
    testResultsDirName = "$buildDir/my-test-results"

 - Si puo' registrare una task che visualizza dove sono stati salvati
    logger.quiet(rootDir.toPath().relativize(project.reportsDir.toPath()).toString())
    logger.quiet(rootDir.toPath().relativize(project.testResultsDir.toPath()).toString())

 - Si possono invocare in github action delle task che sono state sviluppate in locale (per esempio quella che mostra il percorso di salvataggio dei file)

 - Per visualizzare un file XML basta spostarlo in un browser

 - Come si vede andando sul sito di CodeBeautify si puo' convertire xml in json (sul browser) ma penso anche impostando qualche cosa in gradle  (pronti per firebase)

 - tutorial su come lavorare su xml in groovy: https://www.baeldung.com/groovy-xml

 - si importa Groovy-all     implementation 'org.codehaus.groovy:groovy-all:2.4.15'

 - Si puo' usare Ant

 - Gradle dependency management: https://www.youtube.com/watch?v=w5qCmvS9JGE
   articolo: https://pspdfkit.com/blog/2018/moving-your-gradle-build-scripts-to-kotlin/
   altro video youtube: https://www.youtube.com/watch?v=zVml1aua9AE
   articolo medium: https://proandroiddev.com/better-dependencies-management-using-buildsrc-kotlin-dsl-eda31cdb81bf

 - Parse XML
    https://www.baeldung.com/groovy-xml

 - Si possono convertire i risultati direttamente in json (per impostazioni di gradle)? sarebbe perfino meglio!!!!

 - Migrazione a Kotlin (per build) da preferirsi!!!!! https://developer.android.com/studio/build/migrate-to-kts
   Sempre Gradle ma con Kotlin!!!! documentazione ufficiale: https://docs.gradle.org/nightly/userguide/migrating_from_groovy_to_kotlin_dsl.html#applying_plugins

 - ARTICOLO STORICO SU JUNIT TEST: https://github.com/sarven/unit-testing-tips !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 - Ci sono github actions che convertono leggono XML? o convertono in Json? (marketPlace)  https://github.com/search?q=convert+xml+in+json

 - Lettore di XML per github actions!!! https://github.com/marketplace/actions/get-xml-info  !!!!!

 - Ma si puo' anche convertire HTML in Json se si ritiene opportuno!!!

 - Ma le actions sono pubbliche e si puo' leggere il codice con cui sono fatte!!!

 - Possibile leggere valori, e salvarli come artifact e zip!!!     https://github.com/marketplace/actions/get-xml-info

 - Dopo test il percorso e' il seguente: 'app/build/test-results/testDebugUnitTest' e i files sono   (a seconda dei file presenti!!!!)
    TEST-com.example.tests_vari.ExampleSecondUnitTest.xml
    TEST-com.example.tests_vari.ExampleUnitTest.xml

 - per dare comando di listare una directory con github actions: Run ls 'app/build/test-results/testDebugUnitTest'

 - Per eseguire uno step anche se il precedente ha fallito: https://stackoverflow.com/questions/58858429/how-to-run-a-github-actions-step-even-if-the-previous-step-fails-while-still-f
    CI SONO TANTISSIMI CASI!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    CONTINUE ON ERROR!!!

 - Le credenziali di FIREBASE_CREDENTIALS  (che vengono date in automatico) sono l'unico dato necessario e devono essere inserite (come segreto) comprensive delle parentesi grafe!!!!!!!
    Si puo' segnare anche un percorso di salvataggio dei dati

 - Github action che converte da xml in json https://github.com/marketplace/actions/yaml-json-xml-converter-action

 - importare dipendenze esterne: https://stackoverflow.com/questions/25660166/how-to-add-a-jar-in-external-libraries-in-android-studio

 - TUTORIALSPOINT SU GROOVY ha spiegazione e PLAYGROUND!!!!!!!!  https://www.tutorialspoint.com/groovy/groovy_closures.htm

 - Creare una libreria android (documentazione ufficiale) https://developer.android.com/studio/projects/android-library

 - Sito con tantissime spiegazioni su groovy!!!! https://code-maven.com/groovy-json

 - ESPRESSIONI CONDIZIONALI IN GITHUB ACTIONS!!!!!! sono molto interessanti!!!! if()

 - come lavorare con gradle Logger: https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    e creare una libreria in android!!!

 - GRADLE 7.0 Migliorato la situazione!!!!1 https://gradle.org/whats-new/gradle-7/  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! vedere le caratteristiche!!!!!!

 - BUILDSRC!!! interessante (sembra complementare a Build.gradle)!!!! https://proandroiddev.com/better-dependency-management-in-android-studio-3-5-with-gradle-buildsrcversions-7cd67dbaa5d4   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 - Puo' darsi che si debba creare una cartellina buildSrc o riavviare il programma

 - si deve fare procedura!!!!

 - Come si fa' parsing dato che XmlParser e XmlSlurper sono deprecati!!!!!!!!!!!!!!!!!!!!!!!!!!!! https://www.codementor.io/@nadikasbandara/xml-parsing-using-groovy-1b3jr18h3c

 - gradle test --rerun-tasks       Per ripetere un test si deve scrivere:     --RERUN-TASKS    !!!!!

 - interessante https://mkyong.com/gradle/gradle-how-to-continue-build-if-test-is-failed/

 - Unit test e nomi: https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time

 - Eseguire condizionatamente dei test sulla base di altri test!!!! baeldung https://www.baeldung.com/junit-conditional-assume

 - android-xml-run-listener (per AndroidX) e serve per stampare un documento XML con i risultati del test Strumentale!!!!!
   https://github.com/schroepf/TestLab/blob/master/android/android-xml-run-listener/README.md

 - filtrare test in androidTest: https://pspdfkit.com/blog/2020/filtering-tests-in-android/

 - test strumentale avanzato: https://proandroiddev.com/advanced-ui-testing-a1fba4f45894

 - PERMESSI IN INSTRUMENTED TEST!!!! https://proandroiddev.com/advanced-ui-testing-a1fba4f45894

 - CLEARPACKAGEDATA: https://developer.android.com/training/testing/instrumented-tests/androidx-test-libraries/runner#enable-command

 - Come si installa Orchestrator: https://developer.android.com/training/testing/instrumented-tests/androidx-test-libraries/runner#enable-command

 - AndroidJUnitRunner documentazione ufficiale!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! https://androidx.de/androidx/test/runner/AndroidJUnitRunner.html
   Con lista di comandi!!!!! per adb

 - Per verificare la strumentazione installata: adb shell pm list instrumentation    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    E DEVE COMPARIRE IL PROPRIO PACCHETTO!!!!!!!!!!!!!!!!! oppure si deve installare!!!

 - INTERESSANTE PER VERIFICARE ED INSTALLARE STRUMENTAZIONE!!! https://stackoverflow.com/questions/21294945/error-unable-to-find-instrumentation-info-for-componentinfo
   dopo si puo' lanciare il comando adb!!!
   gradle :{$project}:installDebugAndroidTest     esampio: nel nostro caso e' :app    !!!!! si vede lanciando le tasks in gradle (si legge il nome del sottoprogetto oppure in settings!!!)

 - Proviamo ad installare l'app dentro l'emulatore  prima (andando nella cartellina dell'APK)   adb -s emulator-5554 install myapp.apk
   gradl

 - Dopo aver verificato che la strumentazione e' correttamente installata con il seguente comando      adb shell pm list instrumentation
   Si lancia il test strumentale con il seguente comando: adb shell am instrument -w -e class com.example.tests_vari.ExampleInstrumentedTest com.example.tests_vari.test/androidx.test.runner.AndroidJUnitRunner
   (verificato!!!!!!!)
   come la seguente documentazione: https://stackoverflow.com/questions/21294945/error-unable-to-find-instrumentation-info-for-componentinfo   !!!!!

 - vedere altre opzioni per il test strumentale da riga di comando:
   https://developer.android.com/studio/test/command-line#AMSyntax
   OPZIONI: https://developer.android.com/studio/test/command-line#am-instrument-options
   -w (richiesto per poter vedere i risultati del test)

 - Per eseguire solo alcuni test di una classe:
   adb shell am instrument -w -e class com.example.tests_vari.ExampleInstrumentedTest#test1  com.example.tests_vari.test/androidx.test.runner.AndroidJUnitRunner --rerun-tasks   !!!!!!
   adesso si deve associare adb con una task gradle!!!!

 - Documentazione ufficiale Orchestrator: https://androidx.de/androidx/test/orchestrator/AndroidTestOrchestrator.html

 - Video su novità in AndroidTest : https://www.youtube.com/watch?v=juEkViDyzF8

 - "ESPRESSO UI REVEALED" libro interessante !!!

 - https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions    interessante su Github actions!!!!!!!

 - SI POSSONO LANCIARE PIU' COMANDI PER LA STESSA RUN di github action!!!   diversi comandi piu' o meno concatenati!!!!! (vedi sopra) e assegnare variabili!!!!!!
   o dentro github actions, oppure con concatenazione di comandi!!! (su macchina virtuale)!!!!!!

 - comando unico per leggere file in console: adb shell cat sdcard/android/data/com.example.tests_vari/files/giuseppe.txt    !!!!!!!!!!!!!!!

 - adb shell am instrument -w -e class com.example.tests_vari.ExampleInstrumentedTest com.example.tests_vari.test/androidx.test.runner.AndroidJUnitRunner && adb pull sdcard/android/data/com.example.tests_vari/files/giuseppe.txt --debug

 - PIPELINE (run e Script) https://stackoverflow.com/questions/56726429/how-to-run-multiple-commands-in-one-github-actions-docker

 - COMANDI GITHUB ACTIONS (FromJSON etc...) https://docs.github.com/en/actions/learn-github-actions/expressions#fromjson
   https://github.blog/changelog/2020-04-15-github-actions-new-workflow-features/    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjobs_idoutputs

 - Come generare un oggetto JSON in kotlin: https://stackoverflow.com/questions/58100739/how-to-generate-a-json-object-in-kotlin

 - PER AVERE UN POCHINO DI DEBUG SU WORKFLOW SI DEVE STAMPARE A VIDEO IL FILE JSON!!!!! https://github.community/t/set-output-truncates-multiline-strings/16852/3

 */

/* CONCETTI GITHUB ACTIONS:3

    - Differenza tra Id e Name: https://stackoverflow.com/questions/66762605/what-is-the-difference-between-name-and-id-in-github-actions
    ID is used as a reference, from other jobs or steps (for example, in jobs. <job_id>. needs ). Name is used for display purposes on GitHub.

    - ECCEZIONE 1  : https://stackoverflow.com/questions/66626814/github-action-error-process-completed-with-exit-code-1

    - CAPIRE PER ESEMPI: https://www.actionsbyexample.com/  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    - Per convertire una stringa (Json) in un oggetto Json: https://www.actionsbyexample.com/context-expressions.html

    - SETTARE UNA VARIABILE AMBIENTALE CON DIVERSI LIVELLI DI SCOPE!!!!!! https://stackoverflow.com/questions/57968497/how-do-i-set-an-env-var-with-a-bash-expression-in-github-actions

    - BASH!!! https://wiki.bash-hackers.org/syntax/expansion/cmdsubst#specialities     interessante!!!!
      https://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-5.html
      GOALKICKER for BASH!!!! Notes for professional!!!!!!

    - SOSTITUZIONE DI COMANDI (IN BASH) https://wiki.bash-hackers.org/syntax/expansion/cmdsubst#specialities
      https://stackoverflow.com/questions/7427262/how-to-read-a-file-into-a-variable-in-shell

    - ESEMPI GITHUB ACTIONS: https://www.actionsbyexample.com/context-expressions.html

    - CARATTERI SPECIALI IN BASH https://linuxize.com/post/bash-printf-command/

    - TEST E COMANDO BASH PER VERIFICARE SE ESISTE UN FILE E COMPIERE DELLE AZIONI!!! https://linuxize.com/post/bash-check-if-file-exists/

    - SCARICARE FIREBASE CLI E LAVORARCI e TOOLS
      https://firebase.google.com/docs/cli
      https://github.com/firebase/firebase-tools
      https://github.com/marketplace/actions/github-action-for-firebase
      https://firebase.blog/posts/2017/12/read-and-write-your-realtime-database     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      https://firebase.google.com/docs/database/web/read-and-write#web-version-9_1

    - ESPRESSIONI COPNDIZIONALI IN BASH!!!!!
      https://linuxize.com/post/bash-source-command/#:~:text=The%20source%20command%20reads%20and,Linux%20and%20UNIX%20operating%20systems.

    - SI POSSONO SCRIVERE ACTIONS ANCHE IN PYTHON!!!!!!
      https://github.com/cicirello/python-github-action-template
      https://github.com/actions/setup-python   si possono anche installare pacchetti Python

    - LINTER E PYTHON
      https://www.redhat.com/sysadmin/yaml-tips

    - SINTESI YAML interessante: https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html
      per una variabile dopo di due punti si devono mettere le doppie virgolette foo: "{{ variabile }}"

    - Le doppie virgolette permettono Escape!!!!

    - Si puo' fare debug con il programma Cli di Firebase!!! da scaricare

    - UPLOAD E DOWNLOAD ARTIFACT!!!! https://levelup.gitconnected.com/github-actions-how-to-share-data-between-jobs-fc1547defc3e

    - SHARE E ARTIFACTS: https://levelup.gitconnected.com/github-actions-how-to-share-data-between-jobs-fc1547defc3e
 */

/* RUNLISTENER E TESTWATCHER  ( E utilizzo RunListener da linea di comando ADB ):
    - https://automationchronicles.com/using-runlistener-in-android-tests/
    - https://developer.android.com/guide/topics/manifest/instrumentation-element.html    (ADB)
    - https://developer.android.com/reference/androidx/test/runner/AndroidJUnitRunner
    - METODI: https://automationchronicles.com/using-runlistener-in-android-tests/
    - TESTWATCHER E ALTRO: https://www.baeldung.com/junit-testwatcher   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      PER LISTENER CI VUOLE UN MANIFEST STRUMENTALE!!!!!!!

    - CANNOT RESOLVE SYMBOL    NON E' IMPORTANTE!!!!!! https://stackoverflow.com/questions/28665257/androidtargetpackage-cannot-resolve-symbol

    - Come implementare TestWatcher: https://github.com/junit-team/junit4/wiki/Rules     Come Rule!!!!

    - TARGETTIZZARE UNA APPLICAZIONE: https://source.android.com/compatibility/tests/development/instr-app-e2e   Documentazione ufficiale!!!
 */

/* CUSTOM LIBRARY:
    - https://www.vogella.com/tutorials/AndroidLibraryProjects/article.html
 */

/* UCOODE!!!!!!!! SIGNIFICATO: https://www.urbandictionary.com/define.php?term=Coode

 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.example.tests_vari"
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //serve a Orchestrator per cancellare tracce del test precedente ATTENZIONE PERCHE' ALTRIMENTI CANCELLA IL TEST PRECEDENTE (e non si verifica)
        //testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    buildFeatures {
        dataBinding true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/groovy-release-info.properties'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    /*testVariants.all { variant ->

        variant.connectedInstrumentTest.doLast {
            println "This will be executed right after our connectedInstrumentTest!"
            println "The name of the test type: $connectedInstrumentTest.name"
            println "The type of test $connectedInstrumentTest.class"
        }
    }*/

    testOptions {

        //testOrchestrator
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        unitTests.all {

            ignoreFailures = true

            beforeTest { descriptor ->
                logger.lifecycle("Beppe Running test: " + descriptor)
            }
            afterTest { desc, result ->
                logger.lifecycle("************ Beppe: NOME TEST: $desc e RISULTATO TEST: $result")
            }

            beforeSuite { desc ->
                println("Si mette in ascolto $desc")
            }
            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
            //granularità in console dei risultati del test (verificato e 3 corrisponde al singolo metodo)
            testLogging {
                minGranularity 3
                maxGranularity 3
            }
            onOutput { descriptor, event ->
                logger.lifecycle("Beppe Test: " + descriptor + " produced standard out/err: " + event.message )
            }
        }
    }

    //qui che vanno messi i cambi di configurazione di test!!!!
    /*testOptions {
        unitTests.all {
            filter {
                //se si mette il seguente esegue solo il primo test (da linea di comando e build!!!)
                includeTestsMatching "ExampleUnitTest.primo_test"
                //fa' tutti i primi test delle due classi (oppure con Regex!!!)
                //includeTestsMatching "*.primo_test"
            }
            testLogging {
                //serve per stampare in console i risultati relativi ai seguenti eventi (verificato)
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
        }
    }*/
    //questa task copia
    /*task helloandroid(type: Copy) {
        //si puo' mettere anche che dipende dalla build!!!! ma in questo caso non e' necessario!!!!!!!!!
        //dependsOn build
        doLast {  // or doFirst depending on the behaviour you want
            new File("C:/Users/giuse/Documents/Example.txt").eachLine {
                line -> println "line : $line";
            }
        }
    }*/
    //questa task stampa in console (e non ha dipendenze)!!!!!!!
    /*task cavolino(){
        doLast {
            println('eccomi qui!!!!')
        }
    }

    //questa prova a rilanciare il test
    task rilanciatest(){
        dependsOn build
        doLast {
            println('accidempolina')
        }
    }*/

    //giuseppe
    /*configurations {
        groovy
    }
    //giuseppe
    dependencies {
        groovy 'org.apache.groovy:groovy-all:4.0.0'
    }
    //giuseppe
    task downloadGroovy2(type: Copy) {
        from configurations.groovy
        into file('groovy-xml-4.0.0.jar')
    }*/
    //Si modificano queste variabili per modificare il percorso di salvataggio dei risultati
    //reporting.baseDir = "my-reports"
    //testResultsDirName = "$buildDir/my-test-results"

    //per visualizzare la directory di salvataggio dei files !!!!!!!!!
    /*tasks.register('showDirs') {
        doLast {
            println project
            def progetto = project
            logger.quiet(rootDir.toPath().relativize(project.reportsDir.toPath()).toString())
            logger.quiet(rootDir.toPath().relativize(project.testResultsDir.toPath()).toString())
        }
    }*/

    //per convertire in txt
    //build.gradle
    /*task transformXml {
        ext.srcFile = file('mountains.xml')
        ext.destDir = new File(buildDir, 'generated')
        inputs.file srcFile
        outputs.dir destDir
        doLast {
            println "trasforma il file"
            destDir.mkdirs()
            def input = ext.srcFile.text
            //def mountains = new XmlSlurper().parse(srcFile)

            //abbiamo verificato che lo legge
            println "eccolo $ext.srcFile  e il seguente e $input"

            mountains.Mountain.each { mountain ->
                def name = mountain.name[0].text()
                def height = mountain.height[0].text()
                //def destFile = new File(destDir, "${name}.txt")
                //destFile.text = "$name -> ${height}\n"
                println "eccolo e il seguente"
                println(name)
                println(height)
            }
        }
    }*/

    task leggiTest {
        ext.srcFile = file('mountains.xml')
        ext.destDir = new File(buildDir, 'generated')
        inputs.file srcFile
        outputs.dir destDir
        doLast {
            println "trasforma il file"
            destDir.mkdirs()
            def input = ext.srcFile.text
            //def mountains = new XmlSlurper().parse(srcFile)

            //abbiamo verificato che lo legge
            println "eccolo $ext.srcFile  e il seguente e $input"

            /*mountains.Mountain.each { mountain ->
                def name = mountain.name[0].text()
                def height = mountain.height[0].text()
                //def destFile = new File(destDir, "${name}.txt")
                //destFile.text = "$name -> ${height}\n"
                println "eccolo e il seguente"
                println(name)
                println(height)
            }*/
        }
    }

    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events "passed", "skipped", "failed", "standardOut"
            //events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STANDARD_OUT
            exceptionFormat "full"
            showExceptions true
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events "started", "failed", "passed", "skipped", "standardError", "standardOut" //TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STANDARD_ERROR, TestLogEvent.STANDARD_OUT
                exceptionFormat "full"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                println("Questo e' nome: ${desc } e risultato: $result")
                /*if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }*/
            }
        }
    }

    //task per leggere adb
    task senchaBuild {
        doLast {
            exec {
                //commandLine 'cmd', 'c', 'adb devices'
                commandLine 'adb', 'shell'
            }
            sleep(2000)
            exec {
                //commandLine 'cmd', 'c', 'adb devices'
                commandLine 'ls'
            }
            //senchaBuild_steps()
        }
    }

    task eseguicopia() {
        /*doLast {
            exec {
                commandLine 'adb', 'shell'
            }
            exec {
                commandLine 'ls'
            }*/
        //esegue il comando
        //commandLine 'adb', 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.verifica.ExampleInstrumentedTest', 'com.example.verifica.test/androidx.test.runner.AndroidJUnitRunner'//, '&&', 'adb', 'shell', 'cat', 'sdcard/android/data/com.example.tests_vari/files/giuseppe.txt'
        //commandLine 'adb shell am instrument -w -e class com.example.tests_vari.ExampleInstrumentedTest com.example.tests_vari.test/androidx.test.runner.AndroidJUnitRunner && adb pull sdcard/android/data/com.example.tests_vari/files/giuseppe.txt'
        /*exec {
            //adb -s emulator-5554 install myapp.apk
            //adb shell pm list instrumentation
            commandLine 'adb', 'devices'
        }*/
        exec {
            commandLine 'adb','shell', 'pm', 'list', 'instrumentation'
        }
        exec {
            commandLine 'adb', 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.verifica.ExampleInstrumentedTest', 'com.example.verifica.test/androidx.test.runner.AndroidJUnitRunner'
        }

        //commandLine 'adb', 'pull', 'sdcard/android/data/com.example.verifica/files/giuseppe.txt', '../'
        doLast {
            exec {
                //copia il file da emulatore a directory locale
                commandLine 'adb', 'pull', 'sdcard/android/data/com.example.verifica/files/giuseppe.txt', '../'
            }
            //e legge per verifica
            String fileContents = new File('giuseppe.txt').text
            println(fileContents)
        }
    }

    task customInstr (type: Exec) {

                //esegue il comando
                commandLine 'adb', 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.tests_vari.ExampleInstrumentedTest', 'com.example.tests_vari.test/androidx.test.runner.AndroidJUnitRunner'//, '&&', 'adb', 'shell', 'cat', 'sdcard/android/data/com.example.tests_vari/files/giuseppe.txt'
                //commandLine 'adb shell am instrument -w -e class com.example.tests_vari.ExampleInstrumentedTest com.example.tests_vari.test/androidx.test.runner.AndroidJUnitRunner && adb pull sdcard/android/data/com.example.tests_vari/files/giuseppe.txt'

        doLast {
            exec {
                //copia il file da emulatore a directory locale
                commandLine 'adb', 'pull', 'sdcard/android/data/com.example.tests_vari/files/giuseppe.txt', '../'
            }
                //e legge per verifica
                String fileContents = new File('giuseppe.txt').text
                println(fileContents)
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation files('libs/groovy-json-4.0.0.jar')
    implementation files('libs/groovy-xml-4.0.0.jar')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //implementation 'org.codehaus.groovy:groovy-all:2.4.15'
    //localGroovy()
    // Add this line if was not added before.
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation files('libs/groovy-json-4.0.0.jar')
    implementation files('libs/groovy-xml-4.0.0.jar')
    //implementation('org.codehaus.groovy:groovy:2.4.0:grooid')

    //orchestrator
    androidTestUtil 'androidx.test:orchestrator:1.1.0'
    //per le autorizzazione e permessi in test
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
}


